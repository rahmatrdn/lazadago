// Code generated by mockery v2.16.0. DO NOT EDIT.

package lazadamocks

import (
	datamoatentity "github.com/rahmatrdn/lazadago/datamoat/entity"
	entity "github.com/rahmatrdn/lazadago/flexicombo/entity"

	eticketsentity "github.com/rahmatrdn/lazadago/etickets/entity"

	fblentity "github.com/rahmatrdn/lazadago/fbl/entity"

	financeentity "github.com/rahmatrdn/lazadago/finance/entity"

	firstmilebigbagentity "github.com/rahmatrdn/lazadago/firstmilebigbag/entity"

	freeshippingentity "github.com/rahmatrdn/lazadago/freeshipping/entity"

	gspproductentity "github.com/rahmatrdn/lazadago/gspproduct/entity"

	logisticsentity "github.com/rahmatrdn/lazadago/logistics/entity"

	mediacenterentity "github.com/rahmatrdn/lazadago/mediacenter/entity"

	mock "github.com/stretchr/testify/mock"

	orderentity "github.com/rahmatrdn/lazadago/order/entity"

	productentity "github.com/rahmatrdn/lazadago/product/entity"

	productreviewentity "github.com/rahmatrdn/lazadago/productreview/entity"

	returnandrefundentity "github.com/rahmatrdn/lazadago/returnandrefund/entity"

	sellerentity "github.com/rahmatrdn/lazadago/seller/entity"

	sellervoucherentity "github.com/rahmatrdn/lazadago/sellervoucher/entity"

	systementity "github.com/rahmatrdn/lazadago/system/entity"
)

// Lazadar is an autogenerated mock type for the Lazadar type
type Lazadar struct {
	mock.Mock
}

// ActivateFlexiCombo provides a mock function with given fields: id
func (_m *Lazadar) ActivateFlexiCombo(id int64) entity.ActivateFlexiComboResult {
	ret := _m.Called(id)

	var r0 entity.ActivateFlexiComboResult
	if rf, ok := ret.Get(0).(func(int64) entity.ActivateFlexiComboResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.ActivateFlexiComboResult)
	}

	return r0
}

// AddFlexiComboProducts provides a mock function with given fields: id, skuIds
func (_m *Lazadar) AddFlexiComboProducts(id int64, skuIds []int64) entity.AddFlexiComboProductsResult {
	ret := _m.Called(id, skuIds)

	var r0 entity.AddFlexiComboProductsResult
	if rf, ok := ret.Get(0).(func(int64, []int64) entity.AddFlexiComboProductsResult); ok {
		r0 = rf(id, skuIds)
	} else {
		r0 = ret.Get(0).(entity.AddFlexiComboProductsResult)
	}

	return r0
}

// AuthorizationURL provides a mock function with given fields: redirectUri
func (_m *Lazadar) AuthorizationURL(redirectUri string) string {
	ret := _m.Called(redirectUri)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(redirectUri)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CompleteCreateVideo provides a mock function with given fields: uploadId, parts, title, coverUrl
func (_m *Lazadar) CompleteCreateVideo(uploadId string, parts string, title string, coverUrl string) mediacenterentity.CompleteCreateVideoResult {
	ret := _m.Called(uploadId, parts, title, coverUrl)

	var r0 mediacenterentity.CompleteCreateVideoResult
	if rf, ok := ret.Get(0).(func(string, string, string, string) mediacenterentity.CompleteCreateVideoResult); ok {
		r0 = rf(uploadId, parts, title, coverUrl)
	} else {
		r0 = ret.Get(0).(mediacenterentity.CompleteCreateVideoResult)
	}

	return r0
}

// CreateFlexiCombo provides a mock function with given fields: apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, endTime, discountValue, stackable
func (_m *Lazadar) CreateFlexiCombo(apply string, sampleSkus []entity.CreateFlexiComboSampleSkusRequestEntity, criteriaType string, criteriaValue []string, orderNumbers int, name string, platformChannel string, giftSkus []entity.CreateFlexiComboGiftSkusRequestEntity, startTime int, discountType string, endTime int, discountValue []string, stackable string) entity.CreateFlexiComboResult {
	ret := _m.Called(apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, endTime, discountValue, stackable)

	var r0 entity.CreateFlexiComboResult
	if rf, ok := ret.Get(0).(func(string, []entity.CreateFlexiComboSampleSkusRequestEntity, string, []string, int, string, string, []entity.CreateFlexiComboGiftSkusRequestEntity, int, string, int, []string, string) entity.CreateFlexiComboResult); ok {
		r0 = rf(apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, endTime, discountValue, stackable)
	} else {
		r0 = ret.Get(0).(entity.CreateFlexiComboResult)
	}

	return r0
}

// CreateGlobalProduct provides a mock function with given fields: payload
func (_m *Lazadar) CreateGlobalProduct(payload string) gspproductentity.CreateGlobalProductResult {
	ret := _m.Called(payload)

	var r0 gspproductentity.CreateGlobalProductResult
	if rf, ok := ret.Get(0).(func(string) gspproductentity.CreateGlobalProductResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(gspproductentity.CreateGlobalProductResult)
	}

	return r0
}

// CreateProduct provides a mock function with given fields: payload
func (_m *Lazadar) CreateProduct(payload string) productentity.CreateProductResult {
	ret := _m.Called(payload)

	var r0 productentity.CreateProductResult
	if rf, ok := ret.Get(0).(func(string) productentity.CreateProductResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.CreateProductResult)
	}

	return r0
}

// DataMoatComputeRisk provides a mock function with given fields: time, appName, userId, userIp, ati
func (_m *Lazadar) DataMoatComputeRisk(time string, appName string, userId string, userIp string, ati string) datamoatentity.DataMoatComputeRiskResult {
	ret := _m.Called(time, appName, userId, userIp, ati)

	var r0 datamoatentity.DataMoatComputeRiskResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) datamoatentity.DataMoatComputeRiskResult); ok {
		r0 = rf(time, appName, userId, userIp, ati)
	} else {
		r0 = ret.Get(0).(datamoatentity.DataMoatComputeRiskResult)
	}

	return r0
}

// DataMoatLogin provides a mock function with given fields: time, appName, userId, tid, userIp, ati, loginResult, loginMessage
func (_m *Lazadar) DataMoatLogin(time string, appName string, userId string, tid string, userIp string, ati string, loginResult string, loginMessage string) datamoatentity.DataMoatLoginResult {
	ret := _m.Called(time, appName, userId, tid, userIp, ati, loginResult, loginMessage)

	var r0 datamoatentity.DataMoatLoginResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string) datamoatentity.DataMoatLoginResult); ok {
		r0 = rf(time, appName, userId, tid, userIp, ati, loginResult, loginMessage)
	} else {
		r0 = ret.Get(0).(datamoatentity.DataMoatLoginResult)
	}

	return r0
}

// DeactivateFlexiCombo provides a mock function with given fields: id
func (_m *Lazadar) DeactivateFlexiCombo(id int64) entity.DeactivateFlexiComboResult {
	ret := _m.Called(id)

	var r0 entity.DeactivateFlexiComboResult
	if rf, ok := ret.Get(0).(func(int64) entity.DeactivateFlexiComboResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.DeactivateFlexiComboResult)
	}

	return r0
}

// DeactivateProduct provides a mock function with given fields: apiRequestBody
func (_m *Lazadar) DeactivateProduct(apiRequestBody string) productentity.DeactivateProductResult {
	ret := _m.Called(apiRequestBody)

	var r0 productentity.DeactivateProductResult
	if rf, ok := ret.Get(0).(func(string) productentity.DeactivateProductResult); ok {
		r0 = rf(apiRequestBody)
	} else {
		r0 = ret.Get(0).(productentity.DeactivateProductResult)
	}

	return r0
}

// DeleteFlexiComboProducts provides a mock function with given fields: id, skuIds
func (_m *Lazadar) DeleteFlexiComboProducts(id int64, skuIds []int64) entity.DeleteFlexiComboProductsResult {
	ret := _m.Called(id, skuIds)

	var r0 entity.DeleteFlexiComboProductsResult
	if rf, ok := ret.Get(0).(func(int64, []int64) entity.DeleteFlexiComboProductsResult); ok {
		r0 = rf(id, skuIds)
	} else {
		r0 = ret.Get(0).(entity.DeleteFlexiComboProductsResult)
	}

	return r0
}

// FreeShippingActivate provides a mock function with given fields: id
func (_m *Lazadar) FreeShippingActivate(id int64) freeshippingentity.FreeShippingActivateResult {
	ret := _m.Called(id)

	var r0 freeshippingentity.FreeShippingActivateResult
	if rf, ok := ret.Get(0).(func(int64) freeshippingentity.FreeShippingActivateResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingActivateResult)
	}

	return r0
}

// FreeShippingAddSelectedProductSKU provides a mock function with given fields: id, skuIds
func (_m *Lazadar) FreeShippingAddSelectedProductSKU(id int64, skuIds []int64) freeshippingentity.FreeShippingAddSelectedProductSKUResult {
	ret := _m.Called(id, skuIds)

	var r0 freeshippingentity.FreeShippingAddSelectedProductSKUResult
	if rf, ok := ret.Get(0).(func(int64, []int64) freeshippingentity.FreeShippingAddSelectedProductSKUResult); ok {
		r0 = rf(id, skuIds)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingAddSelectedProductSKUResult)
	}

	return r0
}

// FreeShippingCreate provides a mock function with given fields: budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, deliveryOption, tiers, discountType, dealCriteria
func (_m *Lazadar) FreeShippingCreate(budgetType string, templateType string, apply string, periodEndTime int, templateCode string, categoryName string, budgetValue string, promotionName string, periodType string, regionType string, periodStartTime int, platformChannel string, campaignTag string, regionValue []string, deliveryOption string, tiers []freeshippingentity.FreeShippingCreateTiersRequestEntity, discountType string, dealCriteria string) freeshippingentity.FreeShippingCreateResult {
	ret := _m.Called(budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, deliveryOption, tiers, discountType, dealCriteria)

	var r0 freeshippingentity.FreeShippingCreateResult
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, string, string, string, string, string, int, string, string, []string, string, []freeshippingentity.FreeShippingCreateTiersRequestEntity, string, string) freeshippingentity.FreeShippingCreateResult); ok {
		r0 = rf(budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, deliveryOption, tiers, discountType, dealCriteria)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingCreateResult)
	}

	return r0
}

// FreeShippingDeactivate provides a mock function with given fields: id
func (_m *Lazadar) FreeShippingDeactivate(id int64) freeshippingentity.FreeShippingDeactivateResult {
	ret := _m.Called(id)

	var r0 freeshippingentity.FreeShippingDeactivateResult
	if rf, ok := ret.Get(0).(func(int64) freeshippingentity.FreeShippingDeactivateResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingDeactivateResult)
	}

	return r0
}

// FreeShippingDeleteSelectedProductSKU provides a mock function with given fields: id, skuIds
func (_m *Lazadar) FreeShippingDeleteSelectedProductSKU(id int64, skuIds []int64) freeshippingentity.FreeShippingDeleteSelectedProductSKUResult {
	ret := _m.Called(id, skuIds)

	var r0 freeshippingentity.FreeShippingDeleteSelectedProductSKUResult
	if rf, ok := ret.Get(0).(func(int64, []int64) freeshippingentity.FreeShippingDeleteSelectedProductSKUResult); ok {
		r0 = rf(id, skuIds)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingDeleteSelectedProductSKUResult)
	}

	return r0
}

// FreeShippingDeliveryOptionsQuery provides a mock function with given fields:
func (_m *Lazadar) FreeShippingDeliveryOptionsQuery() freeshippingentity.FreeShippingDeliveryOptionsQueryResult {
	ret := _m.Called()

	var r0 freeshippingentity.FreeShippingDeliveryOptionsQueryResult
	if rf, ok := ret.Get(0).(func() freeshippingentity.FreeShippingDeliveryOptionsQueryResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingDeliveryOptionsQueryResult)
	}

	return r0
}

// FreeShippingGet provides a mock function with given fields: id
func (_m *Lazadar) FreeShippingGet(id int64) freeshippingentity.FreeShippingGetResult {
	ret := _m.Called(id)

	var r0 freeshippingentity.FreeShippingGetResult
	if rf, ok := ret.Get(0).(func(int64) freeshippingentity.FreeShippingGetResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingGetResult)
	}

	return r0
}

// FreeShippingList provides a mock function with given fields: curPage, name, pageSize, status
func (_m *Lazadar) FreeShippingList(curPage int, name string, pageSize int, status string) freeshippingentity.FreeShippingListResult {
	ret := _m.Called(curPage, name, pageSize, status)

	var r0 freeshippingentity.FreeShippingListResult
	if rf, ok := ret.Get(0).(func(int, string, int, string) freeshippingentity.FreeShippingListResult); ok {
		r0 = rf(curPage, name, pageSize, status)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingListResult)
	}

	return r0
}

// FreeShippingRegionsQuery provides a mock function with given fields:
func (_m *Lazadar) FreeShippingRegionsQuery() freeshippingentity.FreeShippingRegionsQueryResult {
	ret := _m.Called()

	var r0 freeshippingentity.FreeShippingRegionsQueryResult
	if rf, ok := ret.Get(0).(func() freeshippingentity.FreeShippingRegionsQueryResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingRegionsQueryResult)
	}

	return r0
}

// FreeShippingSelectedProductList provides a mock function with given fields: curPage, pageSize, id
func (_m *Lazadar) FreeShippingSelectedProductList(curPage int, pageSize int, id int64) freeshippingentity.FreeShippingSelectedProductListResult {
	ret := _m.Called(curPage, pageSize, id)

	var r0 freeshippingentity.FreeShippingSelectedProductListResult
	if rf, ok := ret.Get(0).(func(int, int, int64) freeshippingentity.FreeShippingSelectedProductListResult); ok {
		r0 = rf(curPage, pageSize, id)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingSelectedProductListResult)
	}

	return r0
}

// FreeShippingUpdate provides a mock function with given fields: budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, id, deliveryOption, tiers, discountType, dealCriteria
func (_m *Lazadar) FreeShippingUpdate(budgetType string, templateType string, apply string, periodEndTime int, templateCode string, categoryName string, budgetValue string, promotionName string, periodType string, regionType string, periodStartTime int, platformChannel string, campaignTag string, regionValue []string, id int64, deliveryOption string, tiers []freeshippingentity.FreeShippingUpdateTiersRequestEntity, discountType string, dealCriteria string) freeshippingentity.FreeShippingUpdateResult {
	ret := _m.Called(budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, id, deliveryOption, tiers, discountType, dealCriteria)

	var r0 freeshippingentity.FreeShippingUpdateResult
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, string, string, string, string, string, int, string, string, []string, int64, string, []freeshippingentity.FreeShippingUpdateTiersRequestEntity, string, string) freeshippingentity.FreeShippingUpdateResult); ok {
		r0 = rf(budgetType, templateType, apply, periodEndTime, templateCode, categoryName, budgetValue, promotionName, periodType, regionType, periodStartTime, platformChannel, campaignTag, regionValue, id, deliveryOption, tiers, discountType, dealCriteria)
	} else {
		r0 = ret.Get(0).(freeshippingentity.FreeShippingUpdateResult)
	}

	return r0
}

// GenerateAccessToken provides a mock function with given fields: code, uuid
func (_m *Lazadar) GenerateAccessToken(code string, uuid string) systementity.GenerateAccessTokenResult {
	ret := _m.Called(code, uuid)

	var r0 systementity.GenerateAccessTokenResult
	if rf, ok := ret.Get(0).(func(string, string) systementity.GenerateAccessTokenResult); ok {
		r0 = rf(code, uuid)
	} else {
		r0 = ret.Get(0).(systementity.GenerateAccessTokenResult)
	}

	return r0
}

// GetAwbDocumentHtml provides a mock function with given fields: orderItemIds
func (_m *Lazadar) GetAwbDocumentHtml(orderItemIds string) orderentity.GetAwbDocumentHtmlResult {
	ret := _m.Called(orderItemIds)

	var r0 orderentity.GetAwbDocumentHtmlResult
	if rf, ok := ret.Get(0).(func(string) orderentity.GetAwbDocumentHtmlResult); ok {
		r0 = rf(orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.GetAwbDocumentHtmlResult)
	}

	return r0
}

// GetAwbDocumentPDF provides a mock function with given fields: orderItemIds
func (_m *Lazadar) GetAwbDocumentPDF(orderItemIds string) orderentity.GetAwbDocumentPDFResult {
	ret := _m.Called(orderItemIds)

	var r0 orderentity.GetAwbDocumentPDFResult
	if rf, ok := ret.Get(0).(func(string) orderentity.GetAwbDocumentPDFResult); ok {
		r0 = rf(orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.GetAwbDocumentPDFResult)
	}

	return r0
}

// GetBrandByPages provides a mock function with given fields: startRow, pageSize, languageCode
func (_m *Lazadar) GetBrandByPages(startRow string, pageSize string, languageCode string) productentity.GetBrandByPagesResult {
	ret := _m.Called(startRow, pageSize, languageCode)

	var r0 productentity.GetBrandByPagesResult
	if rf, ok := ret.Get(0).(func(string, string, string) productentity.GetBrandByPagesResult); ok {
		r0 = rf(startRow, pageSize, languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetBrandByPagesResult)
	}

	return r0
}

// GetBrandByPagesInt provides a mock function with given fields: startRow, pageSize, languageCode
func (_m *Lazadar) GetBrandByPagesInt(startRow int, pageSize int, languageCode string) productentity.GetBrandByPagesResult {
	ret := _m.Called(startRow, pageSize, languageCode)

	var r0 productentity.GetBrandByPagesResult
	if rf, ok := ret.Get(0).(func(int, int, string) productentity.GetBrandByPagesResult); ok {
		r0 = rf(startRow, pageSize, languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetBrandByPagesResult)
	}

	return r0
}

// GetCategoryAttributes provides a mock function with given fields: primaryCategoryId, languageCode
func (_m *Lazadar) GetCategoryAttributes(primaryCategoryId string, languageCode string) productentity.GetCategoryAttributesResult {
	ret := _m.Called(primaryCategoryId, languageCode)

	var r0 productentity.GetCategoryAttributesResult
	if rf, ok := ret.Get(0).(func(string, string) productentity.GetCategoryAttributesResult); ok {
		r0 = rf(primaryCategoryId, languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetCategoryAttributesResult)
	}

	return r0
}

// GetCategoryAttributesInt64 provides a mock function with given fields: primaryCategoryId, languageCode
func (_m *Lazadar) GetCategoryAttributesInt64(primaryCategoryId int64, languageCode string) productentity.GetCategoryAttributesResult {
	ret := _m.Called(primaryCategoryId, languageCode)

	var r0 productentity.GetCategoryAttributesResult
	if rf, ok := ret.Get(0).(func(int64, string) productentity.GetCategoryAttributesResult); ok {
		r0 = rf(primaryCategoryId, languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetCategoryAttributesResult)
	}

	return r0
}

// GetCategorySuggestion provides a mock function with given fields: productName
func (_m *Lazadar) GetCategorySuggestion(productName string) productentity.GetCategorySuggestionResult {
	ret := _m.Called(productName)

	var r0 productentity.GetCategorySuggestionResult
	if rf, ok := ret.Get(0).(func(string) productentity.GetCategorySuggestionResult); ok {
		r0 = rf(productName)
	} else {
		r0 = ret.Get(0).(productentity.GetCategorySuggestionResult)
	}

	return r0
}

// GetCategoryTree provides a mock function with given fields: languageCode
func (_m *Lazadar) GetCategoryTree(languageCode string) productentity.GetCategoryTreeResult {
	ret := _m.Called(languageCode)

	var r0 productentity.GetCategoryTreeResult
	if rf, ok := ret.Get(0).(func(string) productentity.GetCategoryTreeResult); ok {
		r0 = rf(languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetCategoryTreeResult)
	}

	return r0
}

// GetChannelcodeByFirstMileNo provides a mock function with given fields: firstMileNos
func (_m *Lazadar) GetChannelcodeByFirstMileNo(firstMileNos []string) firstmilebigbagentity.GetChannelcodeByFirstMileNoResult {
	ret := _m.Called(firstMileNos)

	var r0 firstmilebigbagentity.GetChannelcodeByFirstMileNoResult
	if rf, ok := ret.Get(0).(func([]string) firstmilebigbagentity.GetChannelcodeByFirstMileNoResult); ok {
		r0 = rf(firstMileNos)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.GetChannelcodeByFirstMileNoResult)
	}

	return r0
}

// GetDocument provides a mock function with given fields: docType, orderItemIds
func (_m *Lazadar) GetDocument(docType string, orderItemIds string) orderentity.GetDocumentResult {
	ret := _m.Called(docType, orderItemIds)

	var r0 orderentity.GetDocumentResult
	if rf, ok := ret.Get(0).(func(string, string) orderentity.GetDocumentResult); ok {
		r0 = rf(docType, orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.GetDocumentResult)
	}

	return r0
}

// GetFailureReasons provides a mock function with given fields:
func (_m *Lazadar) GetFailureReasons() orderentity.GetFailureReasonsResult {
	ret := _m.Called()

	var r0 orderentity.GetFailureReasonsResult
	if rf, ok := ret.Get(0).(func() orderentity.GetFailureReasonsResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(orderentity.GetFailureReasonsResult)
	}

	return r0
}

// GetFlexiComboDetails provides a mock function with given fields: id
func (_m *Lazadar) GetFlexiComboDetails(id int64) entity.GetFlexiComboDetailsResult {
	ret := _m.Called(id)

	var r0 entity.GetFlexiComboDetailsResult
	if rf, ok := ret.Get(0).(func(int64) entity.GetFlexiComboDetailsResult); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.GetFlexiComboDetailsResult)
	}

	return r0
}

// GetFulfillmentProductDetail provides a mock function with given fields: perPage, shelfLifeFlag, marketplace, fulfillmentSku, serialNumberFlag, page, fulfillmentSkuName, barcode
func (_m *Lazadar) GetFulfillmentProductDetail(perPage int, shelfLifeFlag bool, marketplace string, fulfillmentSku string, serialNumberFlag bool, page int, fulfillmentSkuName string, barcode string) fblentity.GetFulfillmentProductDetailResult {
	ret := _m.Called(perPage, shelfLifeFlag, marketplace, fulfillmentSku, serialNumberFlag, page, fulfillmentSkuName, barcode)

	var r0 fblentity.GetFulfillmentProductDetailResult
	if rf, ok := ret.Get(0).(func(int, bool, string, string, bool, int, string, string) fblentity.GetFulfillmentProductDetailResult); ok {
		r0 = rf(perPage, shelfLifeFlag, marketplace, fulfillmentSku, serialNumberFlag, page, fulfillmentSkuName, barcode)
	} else {
		r0 = ret.Get(0).(fblentity.GetFulfillmentProductDetailResult)
	}

	return r0
}

// GetGlobalProductStatus provides a mock function with given fields: params
func (_m *Lazadar) GetGlobalProductStatus(params gspproductentity.GetGlobalProductStatusParamsRequestEntity) gspproductentity.GetGlobalProductStatusResult {
	ret := _m.Called(params)

	var r0 gspproductentity.GetGlobalProductStatusResult
	if rf, ok := ret.Get(0).(func(gspproductentity.GetGlobalProductStatusParamsRequestEntity) gspproductentity.GetGlobalProductStatusResult); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(gspproductentity.GetGlobalProductStatusResult)
	}

	return r0
}

// GetInboundOrderDetail provides a mock function with given fields: inboundOrderNo, marketplace
func (_m *Lazadar) GetInboundOrderDetail(inboundOrderNo string, marketplace string) fblentity.GetInboundOrderDetailResult {
	ret := _m.Called(inboundOrderNo, marketplace)

	var r0 fblentity.GetInboundOrderDetailResult
	if rf, ok := ret.Get(0).(func(string, string) fblentity.GetInboundOrderDetailResult); ok {
		r0 = rf(inboundOrderNo, marketplace)
	} else {
		r0 = ret.Get(0).(fblentity.GetInboundOrderDetailResult)
	}

	return r0
}

// GetInboundOrderList provides a mock function with given fields: inboundOrderNo, creationTimeFrom, creationTimeTo, inboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage
func (_m *Lazadar) GetInboundOrderList(inboundOrderNo string, creationTimeFrom string, creationTimeTo string, inboundWarehouse string, sellerSku string, fulfillmentSku string, marketplace string, page string, perPage string) fblentity.GetInboundOrderListResult {
	ret := _m.Called(inboundOrderNo, creationTimeFrom, creationTimeTo, inboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage)

	var r0 fblentity.GetInboundOrderListResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string) fblentity.GetInboundOrderListResult); ok {
		r0 = rf(inboundOrderNo, creationTimeFrom, creationTimeTo, inboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage)
	} else {
		r0 = ret.Get(0).(fblentity.GetInboundOrderListResult)
	}

	return r0
}

// GetInventoryChangedSKU provides a mock function with given fields: warehouseCode, page, perPage, marketPlace, operateTimeFrom, operateTimeTo
func (_m *Lazadar) GetInventoryChangedSKU(warehouseCode string, page int, perPage int, marketPlace string, operateTimeFrom string, operateTimeTo string) fblentity.GetInventoryChangedSKUResult {
	ret := _m.Called(warehouseCode, page, perPage, marketPlace, operateTimeFrom, operateTimeTo)

	var r0 fblentity.GetInventoryChangedSKUResult
	if rf, ok := ret.Get(0).(func(string, int, int, string, string, string) fblentity.GetInventoryChangedSKUResult); ok {
		r0 = rf(warehouseCode, page, perPage, marketPlace, operateTimeFrom, operateTimeTo)
	} else {
		r0 = ret.Get(0).(fblentity.GetInventoryChangedSKUResult)
	}

	return r0
}

// GetInventoryOperateLog provides a mock function with given fields: page, perPage, marketPlace, operateTimeFrom, operateTimeTo, warehouseCode, fulfillmentSkuId
func (_m *Lazadar) GetInventoryOperateLog(page int, perPage int, marketPlace string, operateTimeFrom string, operateTimeTo string, warehouseCode string, fulfillmentSkuId string) fblentity.GetInventoryOperateLogResult {
	ret := _m.Called(page, perPage, marketPlace, operateTimeFrom, operateTimeTo, warehouseCode, fulfillmentSkuId)

	var r0 fblentity.GetInventoryOperateLogResult
	if rf, ok := ret.Get(0).(func(int, int, string, string, string, string, string) fblentity.GetInventoryOperateLogResult); ok {
		r0 = rf(page, perPage, marketPlace, operateTimeFrom, operateTimeTo, warehouseCode, fulfillmentSkuId)
	} else {
		r0 = ret.Get(0).(fblentity.GetInventoryOperateLogResult)
	}

	return r0
}

// GetLazadaBigbagPDFLable provides a mock function with given fields: userInfo, client, orderCode, remark, locale, trackingNumber
func (_m *Lazadar) GetLazadaBigbagPDFLable(userInfo firstmilebigbagentity.GetLazadaBigbagPDFLableUserInfoRequestEntity, client string, orderCode string, remark string, locale string, trackingNumber string) firstmilebigbagentity.GetLazadaBigbagPDFLableResult {
	ret := _m.Called(userInfo, client, orderCode, remark, locale, trackingNumber)

	var r0 firstmilebigbagentity.GetLazadaBigbagPDFLableResult
	if rf, ok := ret.Get(0).(func(firstmilebigbagentity.GetLazadaBigbagPDFLableUserInfoRequestEntity, string, string, string, string, string) firstmilebigbagentity.GetLazadaBigbagPDFLableResult); ok {
		r0 = rf(userInfo, client, orderCode, remark, locale, trackingNumber)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.GetLazadaBigbagPDFLableResult)
	}

	return r0
}

// GetMultiWarehouseBySeller provides a mock function with given fields: addressTypes
func (_m *Lazadar) GetMultiWarehouseBySeller(addressTypes string) sellerentity.GetMultiWarehouseBySellerResult {
	ret := _m.Called(addressTypes)

	var r0 sellerentity.GetMultiWarehouseBySellerResult
	if rf, ok := ret.Get(0).(func(string) sellerentity.GetMultiWarehouseBySellerResult); ok {
		r0 = rf(addressTypes)
	} else {
		r0 = ret.Get(0).(sellerentity.GetMultiWarehouseBySellerResult)
	}

	return r0
}

// GetMultipleOrderItems provides a mock function with given fields: orderIds
func (_m *Lazadar) GetMultipleOrderItems(orderIds []int64) orderentity.GetMultipleOrderItemsResult {
	ret := _m.Called(orderIds)

	var r0 orderentity.GetMultipleOrderItemsResult
	if rf, ok := ret.Get(0).(func([]int64) orderentity.GetMultipleOrderItemsResult); ok {
		r0 = rf(orderIds)
	} else {
		r0 = ret.Get(0).(orderentity.GetMultipleOrderItemsResult)
	}

	return r0
}

// GetNewBagNumber provides a mock function with given fields:
func (_m *Lazadar) GetNewBagNumber() firstmilebigbagentity.GetNewBagNumberResult {
	ret := _m.Called()

	var r0 firstmilebigbagentity.GetNewBagNumberResult
	if rf, ok := ret.Get(0).(func() firstmilebigbagentity.GetNewBagNumberResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.GetNewBagNumberResult)
	}

	return r0
}

// GetOVOOrders provides a mock function with given fields: tradeOrderIds
func (_m *Lazadar) GetOVOOrders(tradeOrderIds string) orderentity.GetOVOOrdersResult {
	ret := _m.Called(tradeOrderIds)

	var r0 orderentity.GetOVOOrdersResult
	if rf, ok := ret.Get(0).(func(string) orderentity.GetOVOOrdersResult); ok {
		r0 = rf(tradeOrderIds)
	} else {
		r0 = ret.Get(0).(orderentity.GetOVOOrdersResult)
	}

	return r0
}

// GetOrder provides a mock function with given fields: orderId
func (_m *Lazadar) GetOrder(orderId int64) orderentity.GetOrderResult {
	ret := _m.Called(orderId)

	var r0 orderentity.GetOrderResult
	if rf, ok := ret.Get(0).(func(int64) orderentity.GetOrderResult); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Get(0).(orderentity.GetOrderResult)
	}

	return r0
}

// GetOrderItems provides a mock function with given fields: orderId
func (_m *Lazadar) GetOrderItems(orderId int64) orderentity.GetOrderItemsResult {
	ret := _m.Called(orderId)

	var r0 orderentity.GetOrderItemsResult
	if rf, ok := ret.Get(0).(func(int64) orderentity.GetOrderItemsResult); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Get(0).(orderentity.GetOrderItemsResult)
	}

	return r0
}

// GetOrderItemsFromBarCode provides a mock function with given fields: code
func (_m *Lazadar) GetOrderItemsFromBarCode(code string) eticketsentity.GetOrderItemsFromBarCodeResult {
	ret := _m.Called(code)

	var r0 eticketsentity.GetOrderItemsFromBarCodeResult
	if rf, ok := ret.Get(0).(func(string) eticketsentity.GetOrderItemsFromBarCodeResult); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(eticketsentity.GetOrderItemsFromBarCodeResult)
	}

	return r0
}

// GetOrderTrace provides a mock function with given fields: sellerId, orderId, locale, ofcPackageIdList
func (_m *Lazadar) GetOrderTrace(sellerId string, orderId string, locale string, ofcPackageIdList []string) logisticsentity.GetOrderTraceResult {
	ret := _m.Called(sellerId, orderId, locale, ofcPackageIdList)

	var r0 logisticsentity.GetOrderTraceResult
	if rf, ok := ret.Get(0).(func(string, string, string, []string) logisticsentity.GetOrderTraceResult); ok {
		r0 = rf(sellerId, orderId, locale, ofcPackageIdList)
	} else {
		r0 = ret.Get(0).(logisticsentity.GetOrderTraceResult)
	}

	return r0
}

// GetOrders provides a mock function with given fields: updateBefore, sortDirection, offset, limit, updateAfter, sortBy, createdBefore, createdAfter, status
func (_m *Lazadar) GetOrders(updateBefore string, sortDirection string, offset int, limit int, updateAfter string, sortBy string, createdBefore string, createdAfter string, status string) orderentity.GetOrdersResult {
	ret := _m.Called(updateBefore, sortDirection, offset, limit, updateAfter, sortBy, createdBefore, createdAfter, status)

	var r0 orderentity.GetOrdersResult
	if rf, ok := ret.Get(0).(func(string, string, int, int, string, string, string, string, string) orderentity.GetOrdersResult); ok {
		r0 = rf(updateBefore, sortDirection, offset, limit, updateAfter, sortBy, createdBefore, createdAfter, status)
	} else {
		r0 = ret.Get(0).(orderentity.GetOrdersResult)
	}

	return r0
}

// GetOrdersByUpdateTime provides a mock function with given fields: start, end, offset, limit, status
func (_m *Lazadar) GetOrdersByUpdateTime(start int, end int, offset int, limit int, status string) orderentity.GetOrdersResult {
	ret := _m.Called(start, end, offset, limit, status)

	var r0 orderentity.GetOrdersResult
	if rf, ok := ret.Get(0).(func(int, int, int, int, string) orderentity.GetOrdersResult); ok {
		r0 = rf(start, end, offset, limit, status)
	} else {
		r0 = ret.Get(0).(orderentity.GetOrdersResult)
	}

	return r0
}

// GetOutboundOrderDetail provides a mock function with given fields: outboundOrderNo, marketplace
func (_m *Lazadar) GetOutboundOrderDetail(outboundOrderNo string, marketplace string) fblentity.GetOutboundOrderDetailResult {
	ret := _m.Called(outboundOrderNo, marketplace)

	var r0 fblentity.GetOutboundOrderDetailResult
	if rf, ok := ret.Get(0).(func(string, string) fblentity.GetOutboundOrderDetailResult); ok {
		r0 = rf(outboundOrderNo, marketplace)
	} else {
		r0 = ret.Get(0).(fblentity.GetOutboundOrderDetailResult)
	}

	return r0
}

// GetOutboundOrderList provides a mock function with given fields: outboundOrderNo, creationTimeFrom, creationTimeTo, outboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage
func (_m *Lazadar) GetOutboundOrderList(outboundOrderNo string, creationTimeFrom string, creationTimeTo string, outboundWarehouse string, sellerSku string, fulfillmentSku string, marketplace string, page string, perPage string) fblentity.GetOutboundOrderListResult {
	ret := _m.Called(outboundOrderNo, creationTimeFrom, creationTimeTo, outboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage)

	var r0 fblentity.GetOutboundOrderListResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string) fblentity.GetOutboundOrderListResult); ok {
		r0 = rf(outboundOrderNo, creationTimeFrom, creationTimeTo, outboundWarehouse, sellerSku, fulfillmentSku, marketplace, page, perPage)
	} else {
		r0 = ret.Get(0).(fblentity.GetOutboundOrderListResult)
	}

	return r0
}

// GetPayoutStatus provides a mock function with given fields: createdAfter
func (_m *Lazadar) GetPayoutStatus(createdAfter string) financeentity.GetPayoutStatusResult {
	ret := _m.Called(createdAfter)

	var r0 financeentity.GetPayoutStatusResult
	if rf, ok := ret.Get(0).(func(string) financeentity.GetPayoutStatusResult); ok {
		r0 = rf(createdAfter)
	} else {
		r0 = ret.Get(0).(financeentity.GetPayoutStatusResult)
	}

	return r0
}

// GetPlatformProducts provides a mock function with given fields: perPage, sellerId, marketplace, sellerSku, platformSkuName, readyForInbound, platformSku, page
func (_m *Lazadar) GetPlatformProducts(perPage int, sellerId int64, marketplace string, sellerSku string, platformSkuName string, readyForInbound bool, platformSku string, page int) fblentity.GetPlatformProductsResult {
	ret := _m.Called(perPage, sellerId, marketplace, sellerSku, platformSkuName, readyForInbound, platformSku, page)

	var r0 fblentity.GetPlatformProductsResult
	if rf, ok := ret.Get(0).(func(int, int64, string, string, string, bool, string, int) fblentity.GetPlatformProductsResult); ok {
		r0 = rf(perPage, sellerId, marketplace, sellerSku, platformSkuName, readyForInbound, platformSku, page)
	} else {
		r0 = ret.Get(0).(fblentity.GetPlatformProductsResult)
	}

	return r0
}

// GetProductItem provides a mock function with given fields: itemId, sellerSku
func (_m *Lazadar) GetProductItem(itemId int64, sellerSku string) productentity.GetProductItemResult {
	ret := _m.Called(itemId, sellerSku)

	var r0 productentity.GetProductItemResult
	if rf, ok := ret.Get(0).(func(int64, string) productentity.GetProductItemResult); ok {
		r0 = rf(itemId, sellerSku)
	} else {
		r0 = ret.Get(0).(productentity.GetProductItemResult)
	}

	return r0
}

// GetProductReviewList provides a mock function with given fields: itemId, orderId, startTime, endTime, contentFilter, statusFilter, pageSize, current
func (_m *Lazadar) GetProductReviewList(itemId int64, orderId int64, startTime int, endTime int, contentFilter string, statusFilter string, pageSize int, current int) productreviewentity.GetProductReviewListResult {
	ret := _m.Called(itemId, orderId, startTime, endTime, contentFilter, statusFilter, pageSize, current)

	var r0 productreviewentity.GetProductReviewListResult
	if rf, ok := ret.Get(0).(func(int64, int64, int, int, string, string, int, int) productreviewentity.GetProductReviewListResult); ok {
		r0 = rf(itemId, orderId, startTime, endTime, contentFilter, statusFilter, pageSize, current)
	} else {
		r0 = ret.Get(0).(productreviewentity.GetProductReviewListResult)
	}

	return r0
}

// GetProducts provides a mock function with given fields: filter, updateBefore, createBefore, offset, createAfter, updateAfter, limit, options, skuSellerList
func (_m *Lazadar) GetProducts(filter string, updateBefore string, createBefore string, offset string, createAfter string, updateAfter string, limit string, options string, skuSellerList string) productentity.GetProductsResult {
	ret := _m.Called(filter, updateBefore, createBefore, offset, createAfter, updateAfter, limit, options, skuSellerList)

	var r0 productentity.GetProductsResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, string, string) productentity.GetProductsResult); ok {
		r0 = rf(filter, updateBefore, createBefore, offset, createAfter, updateAfter, limit, options, skuSellerList)
	} else {
		r0 = ret.Get(0).(productentity.GetProductsResult)
	}

	return r0
}

// GetProductsByUpdateTime provides a mock function with given fields: start, end, filter, offset, limit
func (_m *Lazadar) GetProductsByUpdateTime(start int, end int, filter string, offset int, limit int) productentity.GetProductsResult {
	ret := _m.Called(start, end, filter, offset, limit)

	var r0 productentity.GetProductsResult
	if rf, ok := ret.Get(0).(func(int, int, string, int, int) productentity.GetProductsResult); ok {
		r0 = rf(start, end, filter, offset, limit)
	} else {
		r0 = ret.Get(0).(productentity.GetProductsResult)
	}

	return r0
}

// GetQcStatus provides a mock function with given fields: offset, limit, sellerSkus
func (_m *Lazadar) GetQcStatus(offset int, limit int, sellerSkus []string) productentity.GetQcStatusResult {
	ret := _m.Called(offset, limit, sellerSkus)

	var r0 productentity.GetQcStatusResult
	if rf, ok := ret.Get(0).(func(int, int, []string) productentity.GetQcStatusResult); ok {
		r0 = rf(offset, limit, sellerSkus)
	} else {
		r0 = ret.Get(0).(productentity.GetQcStatusResult)
	}

	return r0
}

// GetResponse provides a mock function with given fields: batchId
func (_m *Lazadar) GetResponse(batchId string) productentity.GetResponseResult {
	ret := _m.Called(batchId)

	var r0 productentity.GetResponseResult
	if rf, ok := ret.Get(0).(func(string) productentity.GetResponseResult); ok {
		r0 = rf(batchId)
	} else {
		r0 = ret.Get(0).(productentity.GetResponseResult)
	}

	return r0
}

// GetReverseOrderDetail provides a mock function with given fields: reverseOrderId
func (_m *Lazadar) GetReverseOrderDetail(reverseOrderId int64) returnandrefundentity.GetReverseOrderDetailResult {
	ret := _m.Called(reverseOrderId)

	var r0 returnandrefundentity.GetReverseOrderDetailResult
	if rf, ok := ret.Get(0).(func(int64) returnandrefundentity.GetReverseOrderDetailResult); ok {
		r0 = rf(reverseOrderId)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.GetReverseOrderDetailResult)
	}

	return r0
}

// GetReverseOrderHistoryList provides a mock function with given fields: reverseOrderLineId, pageSize, pageNumber
func (_m *Lazadar) GetReverseOrderHistoryList(reverseOrderLineId int64, pageSize int, pageNumber int) returnandrefundentity.GetReverseOrderHistoryListResult {
	ret := _m.Called(reverseOrderLineId, pageSize, pageNumber)

	var r0 returnandrefundentity.GetReverseOrderHistoryListResult
	if rf, ok := ret.Get(0).(func(int64, int, int) returnandrefundentity.GetReverseOrderHistoryListResult); ok {
		r0 = rf(reverseOrderLineId, pageSize, pageNumber)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.GetReverseOrderHistoryListResult)
	}

	return r0
}

// GetReverseOrderReasonList provides a mock function with given fields: reverseOrderLineId
func (_m *Lazadar) GetReverseOrderReasonList(reverseOrderLineId int64) returnandrefundentity.GetReverseOrderReasonListResult {
	ret := _m.Called(reverseOrderLineId)

	var r0 returnandrefundentity.GetReverseOrderReasonListResult
	if rf, ok := ret.Get(0).(func(int64) returnandrefundentity.GetReverseOrderReasonListResult); ok {
		r0 = rf(reverseOrderLineId)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.GetReverseOrderReasonListResult)
	}

	return r0
}

// GetReverseOrdersForSeller provides a mock function with given fields: ofcStatusList, reverseOrderId, tradeOrderId, pageSize, reverseStatusList, pageNo, returnToType, disputeInProgress
func (_m *Lazadar) GetReverseOrdersForSeller(ofcStatusList []string, reverseOrderId int64, tradeOrderId int64, pageSize int, reverseStatusList []string, pageNo int, returnToType string, disputeInProgress bool) returnandrefundentity.GetReverseOrdersForSellerResult {
	ret := _m.Called(ofcStatusList, reverseOrderId, tradeOrderId, pageSize, reverseStatusList, pageNo, returnToType, disputeInProgress)

	var r0 returnandrefundentity.GetReverseOrdersForSellerResult
	if rf, ok := ret.Get(0).(func([]string, int64, int64, int, []string, int, string, bool) returnandrefundentity.GetReverseOrdersForSellerResult); ok {
		r0 = rf(ofcStatusList, reverseOrderId, tradeOrderId, pageSize, reverseStatusList, pageNo, returnToType, disputeInProgress)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.GetReverseOrdersForSellerResult)
	}

	return r0
}

// GetSeller provides a mock function with given fields:
func (_m *Lazadar) GetSeller() sellerentity.GetSellerResult {
	ret := _m.Called()

	var r0 sellerentity.GetSellerResult
	if rf, ok := ret.Get(0).(func() sellerentity.GetSellerResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sellerentity.GetSellerResult)
	}

	return r0
}

// GetSellerItemLimit provides a mock function with given fields:
func (_m *Lazadar) GetSellerItemLimit() productentity.GetSellerItemLimitResult {
	ret := _m.Called()

	var r0 productentity.GetSellerItemLimitResult
	if rf, ok := ret.Get(0).(func() productentity.GetSellerItemLimitResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(productentity.GetSellerItemLimitResult)
	}

	return r0
}

// GetSellerMetricsById provides a mock function with given fields:
func (_m *Lazadar) GetSellerMetricsById() sellerentity.GetSellerMetricsByIdResult {
	ret := _m.Called()

	var r0 sellerentity.GetSellerMetricsByIdResult
	if rf, ok := ret.Get(0).(func() sellerentity.GetSellerMetricsByIdResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sellerentity.GetSellerMetricsByIdResult)
	}

	return r0
}

// GetSellerPerformance provides a mock function with given fields: language
func (_m *Lazadar) GetSellerPerformance(language string) sellerentity.GetSellerPerformanceResult {
	ret := _m.Called(language)

	var r0 sellerentity.GetSellerPerformanceResult
	if rf, ok := ret.Get(0).(func(string) sellerentity.GetSellerPerformanceResult); ok {
		r0 = rf(language)
	} else {
		r0 = ret.Get(0).(sellerentity.GetSellerPerformanceResult)
	}

	return r0
}

// GetShipmentProviders provides a mock function with given fields:
func (_m *Lazadar) GetShipmentProviders() logisticsentity.GetShipmentProvidersResult {
	ret := _m.Called()

	var r0 logisticsentity.GetShipmentProvidersResult
	if rf, ok := ret.Get(0).(func() logisticsentity.GetShipmentProvidersResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logisticsentity.GetShipmentProvidersResult)
	}

	return r0
}

// GetTransactionDetails provides a mock function with given fields: transType, startTime, endTime, limit, offset
func (_m *Lazadar) GetTransactionDetails(transType string, startTime string, endTime string, limit string, offset string) financeentity.GetTransactionDetailsResult {
	ret := _m.Called(transType, startTime, endTime, limit, offset)

	var r0 financeentity.GetTransactionDetailsResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) financeentity.GetTransactionDetailsResult); ok {
		r0 = rf(transType, startTime, endTime, limit, offset)
	} else {
		r0 = ret.Get(0).(financeentity.GetTransactionDetailsResult)
	}

	return r0
}

// GetUnfilledAttribute provides a mock function with given fields: offset, limit, attributeTag
func (_m *Lazadar) GetUnfilledAttribute(offset int, limit int, attributeTag string) gspproductentity.GetUnfilledAttributeResult {
	ret := _m.Called(offset, limit, attributeTag)

	var r0 gspproductentity.GetUnfilledAttributeResult
	if rf, ok := ret.Get(0).(func(int, int, string) gspproductentity.GetUnfilledAttributeResult); ok {
		r0 = rf(offset, limit, attributeTag)
	} else {
		r0 = ret.Get(0).(gspproductentity.GetUnfilledAttributeResult)
	}

	return r0
}

// GetUnfilledAttributeItem provides a mock function with given fields: pageIndex, attributeTag, pageSize, languageCode
func (_m *Lazadar) GetUnfilledAttributeItem(pageIndex int, attributeTag string, pageSize int, languageCode string) productentity.GetUnfilledAttributeItemResult {
	ret := _m.Called(pageIndex, attributeTag, pageSize, languageCode)

	var r0 productentity.GetUnfilledAttributeItemResult
	if rf, ok := ret.Get(0).(func(int, string, int, string) productentity.GetUnfilledAttributeItemResult); ok {
		r0 = rf(pageIndex, attributeTag, pageSize, languageCode)
	} else {
		r0 = ret.Get(0).(productentity.GetUnfilledAttributeItemResult)
	}

	return r0
}

// GetVideo provides a mock function with given fields: videoId
func (_m *Lazadar) GetVideo(videoId int64) mediacenterentity.GetVideoResult {
	ret := _m.Called(videoId)

	var r0 mediacenterentity.GetVideoResult
	if rf, ok := ret.Get(0).(func(int64) mediacenterentity.GetVideoResult); ok {
		r0 = rf(videoId)
	} else {
		r0 = ret.Get(0).(mediacenterentity.GetVideoResult)
	}

	return r0
}

// GetVideoQuota provides a mock function with given fields:
func (_m *Lazadar) GetVideoQuota() mediacenterentity.GetVideoQuotaResult {
	ret := _m.Called()

	var r0 mediacenterentity.GetVideoQuotaResult
	if rf, ok := ret.Get(0).(func() mediacenterentity.GetVideoQuotaResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediacenterentity.GetVideoQuotaResult)
	}

	return r0
}

// GetWarehouseStock provides a mock function with given fields: sellerSku, marketplace, fulfilmentSku, storeCode
func (_m *Lazadar) GetWarehouseStock(sellerSku string, marketplace string, fulfilmentSku string, storeCode string) fblentity.GetWarehouseStockResult {
	ret := _m.Called(sellerSku, marketplace, fulfilmentSku, storeCode)

	var r0 fblentity.GetWarehouseStockResult
	if rf, ok := ret.Get(0).(func(string, string, string, string) fblentity.GetWarehouseStockResult); ok {
		r0 = rf(sellerSku, marketplace, fulfilmentSku, storeCode)
	} else {
		r0 = ret.Get(0).(fblentity.GetWarehouseStockResult)
	}

	return r0
}

// GetWarehouseStockV3 provides a mock function with given fields: sellerSku, marketplace, fulfilmentSku, storeCode
func (_m *Lazadar) GetWarehouseStockV3(sellerSku string, marketplace string, fulfilmentSku string, storeCode string) fblentity.GetWarehouseStockV3Result {
	ret := _m.Called(sellerSku, marketplace, fulfilmentSku, storeCode)

	var r0 fblentity.GetWarehouseStockV3Result
	if rf, ok := ret.Get(0).(func(string, string, string, string) fblentity.GetWarehouseStockV3Result); ok {
		r0 = rf(sellerSku, marketplace, fulfilmentSku, storeCode)
	} else {
		r0 = ret.Get(0).(fblentity.GetWarehouseStockV3Result)
	}

	return r0
}

// GlobalEticketMerchantMaAvailable provides a mock function with given fields: bizType, code, serialNum, posId, outerId, consumeNum, consumeStoreId
func (_m *Lazadar) GlobalEticketMerchantMaAvailable(bizType int, code string, serialNum string, posId string, outerId string, consumeNum int, consumeStoreId string) eticketsentity.GlobalEticketMerchantMaAvailableResult {
	ret := _m.Called(bizType, code, serialNum, posId, outerId, consumeNum, consumeStoreId)

	var r0 eticketsentity.GlobalEticketMerchantMaAvailableResult
	if rf, ok := ret.Get(0).(func(int, string, string, string, string, int, string) eticketsentity.GlobalEticketMerchantMaAvailableResult); ok {
		r0 = rf(bizType, code, serialNum, posId, outerId, consumeNum, consumeStoreId)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaAvailableResult)
	}

	return r0
}

// GlobalEticketMerchantMaConsume provides a mock function with given fields: bizType, serialNum, posId, outerId, consumeNum, code, consumeStoreId
func (_m *Lazadar) GlobalEticketMerchantMaConsume(bizType int, serialNum string, posId string, outerId string, consumeNum int, code string, consumeStoreId string) eticketsentity.GlobalEticketMerchantMaConsumeResult {
	ret := _m.Called(bizType, serialNum, posId, outerId, consumeNum, code, consumeStoreId)

	var r0 eticketsentity.GlobalEticketMerchantMaConsumeResult
	if rf, ok := ret.Get(0).(func(int, string, string, string, int, string, string) eticketsentity.GlobalEticketMerchantMaConsumeResult); ok {
		r0 = rf(bizType, serialNum, posId, outerId, consumeNum, code, consumeStoreId)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaConsumeResult)
	}

	return r0
}

// GlobalEticketMerchantMaFailsend provides a mock function with given fields: bizType, subCode, outerId, subMsg
func (_m *Lazadar) GlobalEticketMerchantMaFailsend(bizType int, subCode string, outerId string, subMsg string) eticketsentity.GlobalEticketMerchantMaFailsendResult {
	ret := _m.Called(bizType, subCode, outerId, subMsg)

	var r0 eticketsentity.GlobalEticketMerchantMaFailsendResult
	if rf, ok := ret.Get(0).(func(int, string, string, string) eticketsentity.GlobalEticketMerchantMaFailsendResult); ok {
		r0 = rf(bizType, subCode, outerId, subMsg)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaFailsendResult)
	}

	return r0
}

// GlobalEticketMerchantMaQuery provides a mock function with given fields: code, sellerId, storeId
func (_m *Lazadar) GlobalEticketMerchantMaQuery(code string, sellerId int64, storeId int64) eticketsentity.GlobalEticketMerchantMaQueryResult {
	ret := _m.Called(code, sellerId, storeId)

	var r0 eticketsentity.GlobalEticketMerchantMaQueryResult
	if rf, ok := ret.Get(0).(func(string, int64, int64) eticketsentity.GlobalEticketMerchantMaQueryResult); ok {
		r0 = rf(code, sellerId, storeId)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaQueryResult)
	}

	return r0
}

// GlobalEticketMerchantMaQueryTbMa provides a mock function with given fields: code
func (_m *Lazadar) GlobalEticketMerchantMaQueryTbMa(code string) eticketsentity.GlobalEticketMerchantMaQueryTbMaResult {
	ret := _m.Called(code)

	var r0 eticketsentity.GlobalEticketMerchantMaQueryTbMaResult
	if rf, ok := ret.Get(0).(func(string) eticketsentity.GlobalEticketMerchantMaQueryTbMaResult); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaQueryTbMaResult)
	}

	return r0
}

// GlobalEticketMerchantMaSend provides a mock function with given fields: bizType, isvMaList, outerId
func (_m *Lazadar) GlobalEticketMerchantMaSend(bizType int, isvMaList []eticketsentity.GlobalEticketMerchantMaSendIsvMaListRequestEntity, outerId string) eticketsentity.GlobalEticketMerchantMaSendResult {
	ret := _m.Called(bizType, isvMaList, outerId)

	var r0 eticketsentity.GlobalEticketMerchantMaSendResult
	if rf, ok := ret.Get(0).(func(int, []eticketsentity.GlobalEticketMerchantMaSendIsvMaListRequestEntity, string) eticketsentity.GlobalEticketMerchantMaSendResult); ok {
		r0 = rf(bizType, isvMaList, outerId)
	} else {
		r0 = ret.Get(0).(eticketsentity.GlobalEticketMerchantMaSendResult)
	}

	return r0
}

// InitCreateVideo provides a mock function with given fields: fileName, fileBytes
func (_m *Lazadar) InitCreateVideo(fileName string, fileBytes int) mediacenterentity.InitCreateVideoResult {
	ret := _m.Called(fileName, fileBytes)

	var r0 mediacenterentity.InitCreateVideoResult
	if rf, ok := ret.Get(0).(func(string, int) mediacenterentity.InitCreateVideoResult); ok {
		r0 = rf(fileName, fileBytes)
	} else {
		r0 = ret.Get(0).(mediacenterentity.InitCreateVideoResult)
	}

	return r0
}

// InitReverseOrderCancel provides a mock function with given fields: orderItemIdList, orderId, reasonId
func (_m *Lazadar) InitReverseOrderCancel(orderItemIdList []string, orderId int64, reasonId string) returnandrefundentity.InitReverseOrderCancelResult {
	ret := _m.Called(orderItemIdList, orderId, reasonId)

	var r0 returnandrefundentity.InitReverseOrderCancelResult
	if rf, ok := ret.Get(0).(func([]string, int64, string) returnandrefundentity.InitReverseOrderCancelResult); ok {
		r0 = rf(orderItemIdList, orderId, reasonId)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.InitReverseOrderCancelResult)
	}

	return r0
}

// LazadaBigbagCancel provides a mock function with given fields: userInfo, client, orderCode, remark, locale, trackingNumber
func (_m *Lazadar) LazadaBigbagCancel(userInfo firstmilebigbagentity.LazadaBigbagCancelUserInfoRequestEntity, client string, orderCode string, remark string, locale string, trackingNumber string) firstmilebigbagentity.LazadaBigbagCancelResult {
	ret := _m.Called(userInfo, client, orderCode, remark, locale, trackingNumber)

	var r0 firstmilebigbagentity.LazadaBigbagCancelResult
	if rf, ok := ret.Get(0).(func(firstmilebigbagentity.LazadaBigbagCancelUserInfoRequestEntity, string, string, string, string, string) firstmilebigbagentity.LazadaBigbagCancelResult); ok {
		r0 = rf(userInfo, client, orderCode, remark, locale, trackingNumber)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.LazadaBigbagCancelResult)
	}

	return r0
}

// LazadaBigbagCollectionPoints provides a mock function with given fields: pageSize, currentPage
func (_m *Lazadar) LazadaBigbagCollectionPoints(pageSize string, currentPage string) firstmilebigbagentity.LazadaBigbagCollectionPointsResult {
	ret := _m.Called(pageSize, currentPage)

	var r0 firstmilebigbagentity.LazadaBigbagCollectionPointsResult
	if rf, ok := ret.Get(0).(func(string, string) firstmilebigbagentity.LazadaBigbagCollectionPointsResult); ok {
		r0 = rf(pageSize, currentPage)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.LazadaBigbagCollectionPointsResult)
	}

	return r0
}

// LazadaBigbagCommit provides a mock function with given fields: client, collectionInfo, remark, pickupInfo, locale, weightUnit, tp, sellerTrackingNumber, returnInfo, userInfo, orderCodeList, weight
func (_m *Lazadar) LazadaBigbagCommit(client string, collectionInfo firstmilebigbagentity.LazadaBigbagCommitCollectionInfoRequestEntity, remark string, pickupInfo firstmilebigbagentity.LazadaBigbagCommitPickupInfoRequestEntity, locale string, weightUnit string, tp string, sellerTrackingNumber string, returnInfo firstmilebigbagentity.LazadaBigbagCommitReturnInfoRequestEntity, userInfo firstmilebigbagentity.LazadaBigbagCommitUserInfoRequestEntity, orderCodeList []string, weight string) firstmilebigbagentity.LazadaBigbagCommitResult {
	ret := _m.Called(client, collectionInfo, remark, pickupInfo, locale, weightUnit, tp, sellerTrackingNumber, returnInfo, userInfo, orderCodeList, weight)

	var r0 firstmilebigbagentity.LazadaBigbagCommitResult
	if rf, ok := ret.Get(0).(func(string, firstmilebigbagentity.LazadaBigbagCommitCollectionInfoRequestEntity, string, firstmilebigbagentity.LazadaBigbagCommitPickupInfoRequestEntity, string, string, string, string, firstmilebigbagentity.LazadaBigbagCommitReturnInfoRequestEntity, firstmilebigbagentity.LazadaBigbagCommitUserInfoRequestEntity, []string, string) firstmilebigbagentity.LazadaBigbagCommitResult); ok {
		r0 = rf(client, collectionInfo, remark, pickupInfo, locale, weightUnit, tp, sellerTrackingNumber, returnInfo, userInfo, orderCodeList, weight)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.LazadaBigbagCommitResult)
	}

	return r0
}

// LazadaBigbagUpdate provides a mock function with given fields: userInfo, weight, locale, orderCodeList, client, orderCode, trackingNumber, weightUnit
func (_m *Lazadar) LazadaBigbagUpdate(userInfo firstmilebigbagentity.LazadaBigbagUpdateUserInfoRequestEntity, weight int, locale string, orderCodeList []string, client string, orderCode string, trackingNumber string, weightUnit string) firstmilebigbagentity.LazadaBigbagUpdateResult {
	ret := _m.Called(userInfo, weight, locale, orderCodeList, client, orderCode, trackingNumber, weightUnit)

	var r0 firstmilebigbagentity.LazadaBigbagUpdateResult
	if rf, ok := ret.Get(0).(func(firstmilebigbagentity.LazadaBigbagUpdateUserInfoRequestEntity, int, string, []string, string, string, string, string) firstmilebigbagentity.LazadaBigbagUpdateResult); ok {
		r0 = rf(userInfo, weight, locale, orderCodeList, client, orderCode, trackingNumber, weightUnit)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.LazadaBigbagUpdateResult)
	}

	return r0
}

// LazadaSellerAccountBind provides a mock function with given fields: userInfo, client, remark, sellerList, locale
func (_m *Lazadar) LazadaSellerAccountBind(userInfo firstmilebigbagentity.LazadaSellerAccountBindUserInfoRequestEntity, client string, remark string, sellerList []firstmilebigbagentity.LazadaSellerAccountBindSellerListRequestEntity, locale string) firstmilebigbagentity.LazadaSellerAccountBindResult {
	ret := _m.Called(userInfo, client, remark, sellerList, locale)

	var r0 firstmilebigbagentity.LazadaSellerAccountBindResult
	if rf, ok := ret.Get(0).(func(firstmilebigbagentity.LazadaSellerAccountBindUserInfoRequestEntity, string, string, []firstmilebigbagentity.LazadaSellerAccountBindSellerListRequestEntity, string) firstmilebigbagentity.LazadaSellerAccountBindResult); ok {
		r0 = rf(userInfo, client, remark, sellerList, locale)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.LazadaSellerAccountBindResult)
	}

	return r0
}

// ListFlexiCombo provides a mock function with given fields: curPage, name, pageSize, status
func (_m *Lazadar) ListFlexiCombo(curPage int, name string, pageSize int, status string) entity.ListFlexiComboResult {
	ret := _m.Called(curPage, name, pageSize, status)

	var r0 entity.ListFlexiComboResult
	if rf, ok := ret.Get(0).(func(int, string, int, string) entity.ListFlexiComboResult); ok {
		r0 = rf(curPage, name, pageSize, status)
	} else {
		r0 = ret.Get(0).(entity.ListFlexiComboResult)
	}

	return r0
}

// ListFlexiComboProducts provides a mock function with given fields: curPage, pageSize, id
func (_m *Lazadar) ListFlexiComboProducts(curPage int, pageSize int, id int64) entity.ListFlexiComboProductsResult {
	ret := _m.Called(curPage, pageSize, id)

	var r0 entity.ListFlexiComboProductsResult
	if rf, ok := ret.Get(0).(func(int, int, int64) entity.ListFlexiComboProductsResult); ok {
		r0 = rf(curPage, pageSize, id)
	} else {
		r0 = ret.Get(0).(entity.ListFlexiComboProductsResult)
	}

	return r0
}

// MigrateImage provides a mock function with given fields: payload
func (_m *Lazadar) MigrateImage(payload string) productentity.MigrateImageResult {
	ret := _m.Called(payload)

	var r0 productentity.MigrateImageResult
	if rf, ok := ret.Get(0).(func(string) productentity.MigrateImageResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.MigrateImageResult)
	}

	return r0
}

// MigrateImages provides a mock function with given fields: payload
func (_m *Lazadar) MigrateImages(payload string) productentity.MigrateImagesResult {
	ret := _m.Called(payload)

	var r0 productentity.MigrateImagesResult
	if rf, ok := ret.Get(0).(func(string) productentity.MigrateImagesResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.MigrateImagesResult)
	}

	return r0
}

// QueryAddressInformaiton provides a mock function with given fields: country, zipCode, userInfo, city, remark, locale, province, street, district, detailAddress, client
func (_m *Lazadar) QueryAddressInformaiton(country string, zipCode string, userInfo firstmilebigbagentity.QueryAddressInformaitonUserInfoRequestEntity, city string, remark string, locale string, province string, street string, district string, detailAddress string, client string) firstmilebigbagentity.QueryAddressInformaitonResult {
	ret := _m.Called(country, zipCode, userInfo, city, remark, locale, province, street, district, detailAddress, client)

	var r0 firstmilebigbagentity.QueryAddressInformaitonResult
	if rf, ok := ret.Get(0).(func(string, string, firstmilebigbagentity.QueryAddressInformaitonUserInfoRequestEntity, string, string, string, string, string, string, string, string) firstmilebigbagentity.QueryAddressInformaitonResult); ok {
		r0 = rf(country, zipCode, userInfo, city, remark, locale, province, street, district, detailAddress, client)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.QueryAddressInformaitonResult)
	}

	return r0
}

// QueryLazadaBigbagInfo provides a mock function with given fields: userInfo, client, orderCode, remark, locale, trackingNumber
func (_m *Lazadar) QueryLazadaBigbagInfo(userInfo firstmilebigbagentity.QueryLazadaBigbagInfoUserInfoRequestEntity, client string, orderCode string, remark string, locale string, trackingNumber string) firstmilebigbagentity.QueryLazadaBigbagInfoResult {
	ret := _m.Called(userInfo, client, orderCode, remark, locale, trackingNumber)

	var r0 firstmilebigbagentity.QueryLazadaBigbagInfoResult
	if rf, ok := ret.Get(0).(func(firstmilebigbagentity.QueryLazadaBigbagInfoUserInfoRequestEntity, string, string, string, string, string) firstmilebigbagentity.QueryLazadaBigbagInfoResult); ok {
		r0 = rf(userInfo, client, orderCode, remark, locale, trackingNumber)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.QueryLazadaBigbagInfoResult)
	}

	return r0
}

// QueryPackageStatus provides a mock function with given fields: trackingNumbers
func (_m *Lazadar) QueryPackageStatus(trackingNumbers []string) firstmilebigbagentity.QueryPackageStatusResult {
	ret := _m.Called(trackingNumbers)

	var r0 firstmilebigbagentity.QueryPackageStatusResult
	if rf, ok := ret.Get(0).(func([]string) firstmilebigbagentity.QueryPackageStatusResult); ok {
		r0 = rf(trackingNumbers)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.QueryPackageStatusResult)
	}

	return r0
}

// QueryTransactionDetails provides a mock function with given fields: offset, transType, tradeOrderId, limit, startTime, endTime, tradeOrderLineId
func (_m *Lazadar) QueryTransactionDetails(offset string, transType string, tradeOrderId string, limit string, startTime string, endTime string, tradeOrderLineId string) financeentity.QueryTransactionDetailsResult {
	ret := _m.Called(offset, transType, tradeOrderId, limit, startTime, endTime, tradeOrderLineId)

	var r0 financeentity.QueryTransactionDetailsResult
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) financeentity.QueryTransactionDetailsResult); ok {
		r0 = rf(offset, transType, tradeOrderId, limit, startTime, endTime, tradeOrderLineId)
	} else {
		r0 = ret.Get(0).(financeentity.QueryTransactionDetailsResult)
	}

	return r0
}

// RedeemOrderItems provides a mock function with given fields: bizType, code, outerId, serialNum, consumeNum, storeId, posId
func (_m *Lazadar) RedeemOrderItems(bizType int, code string, outerId string, serialNum string, consumeNum int, storeId string, posId string) eticketsentity.RedeemOrderItemsResult {
	ret := _m.Called(bizType, code, outerId, serialNum, consumeNum, storeId, posId)

	var r0 eticketsentity.RedeemOrderItemsResult
	if rf, ok := ret.Get(0).(func(int, string, string, string, int, string, string) eticketsentity.RedeemOrderItemsResult); ok {
		r0 = rf(bizType, code, outerId, serialNum, consumeNum, storeId, posId)
	} else {
		r0 = ret.Get(0).(eticketsentity.RedeemOrderItemsResult)
	}

	return r0
}

// RefreshAccessToken provides a mock function with given fields: refreshToken
func (_m *Lazadar) RefreshAccessToken(refreshToken string) systementity.RefreshAccessTokenResult {
	ret := _m.Called(refreshToken)

	var r0 systementity.RefreshAccessTokenResult
	if rf, ok := ret.Get(0).(func(string) systementity.RefreshAccessTokenResult); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(systementity.RefreshAccessTokenResult)
	}

	return r0
}

// RemoveProduct provides a mock function with given fields: sellerSkuList
func (_m *Lazadar) RemoveProduct(sellerSkuList string) productentity.RemoveProductResult {
	ret := _m.Called(sellerSkuList)

	var r0 productentity.RemoveProductResult
	if rf, ok := ret.Get(0).(func(string) productentity.RemoveProductResult); ok {
		r0 = rf(sellerSkuList)
	} else {
		r0 = ret.Get(0).(productentity.RemoveProductResult)
	}

	return r0
}

// RemoveSku provides a mock function with given fields: payload
func (_m *Lazadar) RemoveSku(payload string) productentity.RemoveSkuResult {
	ret := _m.Called(payload)

	var r0 productentity.RemoveSkuResult
	if rf, ok := ret.Get(0).(func(string) productentity.RemoveSkuResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.RemoveSkuResult)
	}

	return r0
}

// RemoveVideo provides a mock function with given fields: videoId
func (_m *Lazadar) RemoveVideo(videoId int64) mediacenterentity.RemoveVideoResult {
	ret := _m.Called(videoId)

	var r0 mediacenterentity.RemoveVideoResult
	if rf, ok := ret.Get(0).(func(int64) mediacenterentity.RemoveVideoResult); ok {
		r0 = rf(videoId)
	} else {
		r0 = ret.Get(0).(mediacenterentity.RemoveVideoResult)
	}

	return r0
}

// RetailFulfilmentCreate provides a mock function with given fields: platformName, source, sellerId, platformSkuCode, itemId, skuId, platformSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features
func (_m *Lazadar) RetailFulfilmentCreate(platformName string, source string, sellerId int64, platformSkuCode string, itemId int64, skuId int64, platformSkuName string, barcodeList []string, categoryId int64, brand string, brandName string, isShelfLifeMgt bool, lifeCycleDays int, rejectLifeCycleDays int, lockupLifeCycleDays int, adventLifeCycleDays int, isSnMgt bool, cpWeight int, cpLength int, cpWidth int, cpHeight int, skuPrice int, features productentity.RetailFulfilmentCreateFeaturesRequestEntity) productentity.RetailFulfilmentCreateResult {
	ret := _m.Called(platformName, source, sellerId, platformSkuCode, itemId, skuId, platformSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features)

	var r0 productentity.RetailFulfilmentCreateResult
	if rf, ok := ret.Get(0).(func(string, string, int64, string, int64, int64, string, []string, int64, string, string, bool, int, int, int, int, bool, int, int, int, int, int, productentity.RetailFulfilmentCreateFeaturesRequestEntity) productentity.RetailFulfilmentCreateResult); ok {
		r0 = rf(platformName, source, sellerId, platformSkuCode, itemId, skuId, platformSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features)
	} else {
		r0 = ret.Get(0).(productentity.RetailFulfilmentCreateResult)
	}

	return r0
}

// RetailFulfilmentUpdate provides a mock function with given fields: scItemId, fulfillmentSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features, source
func (_m *Lazadar) RetailFulfilmentUpdate(scItemId string, fulfillmentSkuName string, barcodeList []string, categoryId int64, brand string, brandName string, isShelfLifeMgt bool, lifeCycleDays int, rejectLifeCycleDays int, lockupLifeCycleDays int, adventLifeCycleDays int, isSnMgt bool, cpWeight int, cpLength int, cpWidth int, cpHeight int, skuPrice int, features productentity.RetailFulfilmentUpdateFeaturesRequestEntity, source string) productentity.RetailFulfilmentUpdateResult {
	ret := _m.Called(scItemId, fulfillmentSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features, source)

	var r0 productentity.RetailFulfilmentUpdateResult
	if rf, ok := ret.Get(0).(func(string, string, []string, int64, string, string, bool, int, int, int, int, bool, int, int, int, int, int, productentity.RetailFulfilmentUpdateFeaturesRequestEntity, string) productentity.RetailFulfilmentUpdateResult); ok {
		r0 = rf(scItemId, fulfillmentSkuName, barcodeList, categoryId, brand, brandName, isShelfLifeMgt, lifeCycleDays, rejectLifeCycleDays, lockupLifeCycleDays, adventLifeCycleDays, isSnMgt, cpWeight, cpLength, cpWidth, cpHeight, skuPrice, features, source)
	} else {
		r0 = ret.Get(0).(productentity.RetailFulfilmentUpdateResult)
	}

	return r0
}

// ReverseOrderCancelValidate provides a mock function with given fields: orderId, orderItemIdList
func (_m *Lazadar) ReverseOrderCancelValidate(orderId string, orderItemIdList string) returnandrefundentity.ReverseOrderCancelValidateResult {
	ret := _m.Called(orderId, orderItemIdList)

	var r0 returnandrefundentity.ReverseOrderCancelValidateResult
	if rf, ok := ret.Get(0).(func(string, string) returnandrefundentity.ReverseOrderCancelValidateResult); ok {
		r0 = rf(orderId, orderItemIdList)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.ReverseOrderCancelValidateResult)
	}

	return r0
}

// ReverseOrderReturnUpdate provides a mock function with given fields: action, reverseOrderId, reverseOrderItemIds, reasonId, comment, imageInfo
func (_m *Lazadar) ReverseOrderReturnUpdate(action string, reverseOrderId int64, reverseOrderItemIds []int64, reasonId int64, comment string, imageInfo []returnandrefundentity.ReverseOrderReturnUpdateImageInfoRequestEntity) returnandrefundentity.ReverseOrderReturnUpdateResult {
	ret := _m.Called(action, reverseOrderId, reverseOrderItemIds, reasonId, comment, imageInfo)

	var r0 returnandrefundentity.ReverseOrderReturnUpdateResult
	if rf, ok := ret.Get(0).(func(string, int64, []int64, int64, string, []returnandrefundentity.ReverseOrderReturnUpdateImageInfoRequestEntity) returnandrefundentity.ReverseOrderReturnUpdateResult); ok {
		r0 = rf(action, reverseOrderId, reverseOrderItemIds, reasonId, comment, imageInfo)
	} else {
		r0 = ret.Get(0).(returnandrefundentity.ReverseOrderReturnUpdateResult)
	}

	return r0
}

// SellerVoucherActivate provides a mock function with given fields: voucherType, id
func (_m *Lazadar) SellerVoucherActivate(voucherType string, id int64) sellervoucherentity.SellerVoucherActivateResult {
	ret := _m.Called(voucherType, id)

	var r0 sellervoucherentity.SellerVoucherActivateResult
	if rf, ok := ret.Get(0).(func(string, int64) sellervoucherentity.SellerVoucherActivateResult); ok {
		r0 = rf(voucherType, id)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherActivateResult)
	}

	return r0
}

// SellerVoucherAddSelectedProductSKU provides a mock function with given fields: voucherType, id, skuIds
func (_m *Lazadar) SellerVoucherAddSelectedProductSKU(voucherType string, id int64, skuIds []int64) sellervoucherentity.SellerVoucherAddSelectedProductSKUResult {
	ret := _m.Called(voucherType, id, skuIds)

	var r0 sellervoucherentity.SellerVoucherAddSelectedProductSKUResult
	if rf, ok := ret.Get(0).(func(string, int64, []int64) sellervoucherentity.SellerVoucherAddSelectedProductSKUResult); ok {
		r0 = rf(voucherType, id, skuIds)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherAddSelectedProductSKUResult)
	}

	return r0
}

// SellerVoucherCreate provides a mock function with given fields: criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued, maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff
func (_m *Lazadar) SellerVoucherCreate(criteriaOverMoney string, voucherType string, apply string, collectStart int, displayArea string, periodEndTime int, voucherName string, voucherDiscountType string, offeringMoneyValueOff string, periodStartTime int, limit int, issued int, maxDiscountOfferingMoneyValue string, offeringPercentageDiscountOff int) sellervoucherentity.SellerVoucherCreateResult {
	ret := _m.Called(criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued, maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff)

	var r0 sellervoucherentity.SellerVoucherCreateResult
	if rf, ok := ret.Get(0).(func(string, string, string, int, string, int, string, string, string, int, int, int, string, int) sellervoucherentity.SellerVoucherCreateResult); ok {
		r0 = rf(criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued, maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherCreateResult)
	}

	return r0
}

// SellerVoucherDeactivate provides a mock function with given fields: voucherType, id
func (_m *Lazadar) SellerVoucherDeactivate(voucherType string, id int64) sellervoucherentity.SellerVoucherDeactivateResult {
	ret := _m.Called(voucherType, id)

	var r0 sellervoucherentity.SellerVoucherDeactivateResult
	if rf, ok := ret.Get(0).(func(string, int64) sellervoucherentity.SellerVoucherDeactivateResult); ok {
		r0 = rf(voucherType, id)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherDeactivateResult)
	}

	return r0
}

// SellerVoucherDeleteSelectedProductSKU provides a mock function with given fields: voucherType, id, skuIds
func (_m *Lazadar) SellerVoucherDeleteSelectedProductSKU(voucherType string, id int64, skuIds []int64) sellervoucherentity.SellerVoucherDeleteSelectedProductSKUResult {
	ret := _m.Called(voucherType, id, skuIds)

	var r0 sellervoucherentity.SellerVoucherDeleteSelectedProductSKUResult
	if rf, ok := ret.Get(0).(func(string, int64, []int64) sellervoucherentity.SellerVoucherDeleteSelectedProductSKUResult); ok {
		r0 = rf(voucherType, id, skuIds)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherDeleteSelectedProductSKUResult)
	}

	return r0
}

// SellerVoucherDetailQuery provides a mock function with given fields: voucherType, id
func (_m *Lazadar) SellerVoucherDetailQuery(voucherType string, id int64) sellervoucherentity.SellerVoucherDetailQueryResult {
	ret := _m.Called(voucherType, id)

	var r0 sellervoucherentity.SellerVoucherDetailQueryResult
	if rf, ok := ret.Get(0).(func(string, int64) sellervoucherentity.SellerVoucherDetailQueryResult); ok {
		r0 = rf(voucherType, id)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherDetailQueryResult)
	}

	return r0
}

// SellerVoucherList provides a mock function with given fields: curPage, voucherType, name, pageSize, status
func (_m *Lazadar) SellerVoucherList(curPage int, voucherType string, name string, pageSize int, status string) sellervoucherentity.SellerVoucherListResult {
	ret := _m.Called(curPage, voucherType, name, pageSize, status)

	var r0 sellervoucherentity.SellerVoucherListResult
	if rf, ok := ret.Get(0).(func(int, string, string, int, string) sellervoucherentity.SellerVoucherListResult); ok {
		r0 = rf(curPage, voucherType, name, pageSize, status)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherListResult)
	}

	return r0
}

// SellerVoucherSelectedProductList provides a mock function with given fields: voucherType, id
func (_m *Lazadar) SellerVoucherSelectedProductList(voucherType string, id int64) sellervoucherentity.SellerVoucherSelectedProductListResult {
	ret := _m.Called(voucherType, id)

	var r0 sellervoucherentity.SellerVoucherSelectedProductListResult
	if rf, ok := ret.Get(0).(func(string, int64) sellervoucherentity.SellerVoucherSelectedProductListResult); ok {
		r0 = rf(voucherType, id)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherSelectedProductListResult)
	}

	return r0
}

// SellerVoucherUpdate provides a mock function with given fields: maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff, id, criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued
func (_m *Lazadar) SellerVoucherUpdate(maxDiscountOfferingMoneyValue string, offeringPercentageDiscountOff int, id string, criteriaOverMoney string, voucherType string, apply string, collectStart int, displayArea string, periodEndTime int, voucherName string, voucherDiscountType string, offeringMoneyValueOff string, periodStartTime int, limit int, issued int) sellervoucherentity.SellerVoucherUpdateResult {
	ret := _m.Called(maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff, id, criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued)

	var r0 sellervoucherentity.SellerVoucherUpdateResult
	if rf, ok := ret.Get(0).(func(string, int, string, string, string, string, int, string, int, string, string, string, int, int, int) sellervoucherentity.SellerVoucherUpdateResult); ok {
		r0 = rf(maxDiscountOfferingMoneyValue, offeringPercentageDiscountOff, id, criteriaOverMoney, voucherType, apply, collectStart, displayArea, periodEndTime, voucherName, voucherDiscountType, offeringMoneyValueOff, periodStartTime, limit, issued)
	} else {
		r0 = ret.Get(0).(sellervoucherentity.SellerVoucherUpdateResult)
	}

	return r0
}

// SetAccessToken provides a mock function with given fields: accessToken
func (_m *Lazadar) SetAccessToken(accessToken string) {
	_m.Called(accessToken)
}

// SetImages provides a mock function with given fields: payload
func (_m *Lazadar) SetImages(payload string) productentity.SetImagesResult {
	ret := _m.Called(payload)

	var r0 productentity.SetImagesResult
	if rf, ok := ret.Get(0).(func(string) productentity.SetImagesResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.SetImagesResult)
	}

	return r0
}

// SetInvoiceNumber provides a mock function with given fields: orderItemId, invoiceNumber
func (_m *Lazadar) SetInvoiceNumber(orderItemId int64, invoiceNumber string) orderentity.SetInvoiceNumberResult {
	ret := _m.Called(orderItemId, invoiceNumber)

	var r0 orderentity.SetInvoiceNumberResult
	if rf, ok := ret.Get(0).(func(int64, string) orderentity.SetInvoiceNumberResult); ok {
		r0 = rf(orderItemId, invoiceNumber)
	} else {
		r0 = ret.Get(0).(orderentity.SetInvoiceNumberResult)
	}

	return r0
}

// SetRepack provides a mock function with given fields: packageId
func (_m *Lazadar) SetRepack(packageId string) orderentity.SetRepackResult {
	ret := _m.Called(packageId)

	var r0 orderentity.SetRepackResult
	if rf, ok := ret.Get(0).(func(string) orderentity.SetRepackResult); ok {
		r0 = rf(packageId)
	} else {
		r0 = ret.Get(0).(orderentity.SetRepackResult)
	}

	return r0
}

// SetStatusToCanceled provides a mock function with given fields: reasonDetail, reasonId, orderItemId
func (_m *Lazadar) SetStatusToCanceled(reasonDetail string, reasonId int64, orderItemId int64) orderentity.SetStatusToCanceledResult {
	ret := _m.Called(reasonDetail, reasonId, orderItemId)

	var r0 orderentity.SetStatusToCanceledResult
	if rf, ok := ret.Get(0).(func(string, int64, int64) orderentity.SetStatusToCanceledResult); ok {
		r0 = rf(reasonDetail, reasonId, orderItemId)
	} else {
		r0 = ret.Get(0).(orderentity.SetStatusToCanceledResult)
	}

	return r0
}

// SetStatusToPackedByMarketplace provides a mock function with given fields: shippingProvider, deliveryType, orderItemIds
func (_m *Lazadar) SetStatusToPackedByMarketplace(shippingProvider string, deliveryType string, orderItemIds string) orderentity.SetStatusToPackedByMarketplaceResult {
	ret := _m.Called(shippingProvider, deliveryType, orderItemIds)

	var r0 orderentity.SetStatusToPackedByMarketplaceResult
	if rf, ok := ret.Get(0).(func(string, string, string) orderentity.SetStatusToPackedByMarketplaceResult); ok {
		r0 = rf(shippingProvider, deliveryType, orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.SetStatusToPackedByMarketplaceResult)
	}

	return r0
}

// SetStatusToReadyToShip provides a mock function with given fields: deliveryType, orderItemIds, shipmentProvider, trackingNumber
func (_m *Lazadar) SetStatusToReadyToShip(deliveryType string, orderItemIds string, shipmentProvider string, trackingNumber string) orderentity.SetStatusToReadyToShipResult {
	ret := _m.Called(deliveryType, orderItemIds, shipmentProvider, trackingNumber)

	var r0 orderentity.SetStatusToReadyToShipResult
	if rf, ok := ret.Get(0).(func(string, string, string, string) orderentity.SetStatusToReadyToShipResult); ok {
		r0 = rf(deliveryType, orderItemIds, shipmentProvider, trackingNumber)
	} else {
		r0 = ret.Get(0).(orderentity.SetStatusToReadyToShipResult)
	}

	return r0
}

// SetStatusToSOFDelivered provides a mock function with given fields: orderItemIds
func (_m *Lazadar) SetStatusToSOFDelivered(orderItemIds string) orderentity.SetStatusToSOFDeliveredResult {
	ret := _m.Called(orderItemIds)

	var r0 orderentity.SetStatusToSOFDeliveredResult
	if rf, ok := ret.Get(0).(func(string) orderentity.SetStatusToSOFDeliveredResult); ok {
		r0 = rf(orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.SetStatusToSOFDeliveredResult)
	}

	return r0
}

// SetStatusToSOFFailedDelivery provides a mock function with given fields: orderItemIds
func (_m *Lazadar) SetStatusToSOFFailedDelivery(orderItemIds string) orderentity.SetStatusToSOFFailedDeliveryResult {
	ret := _m.Called(orderItemIds)

	var r0 orderentity.SetStatusToSOFFailedDeliveryResult
	if rf, ok := ret.Get(0).(func(string) orderentity.SetStatusToSOFFailedDeliveryResult); ok {
		r0 = rf(orderItemIds)
	} else {
		r0 = ret.Get(0).(orderentity.SetStatusToSOFFailedDeliveryResult)
	}

	return r0
}

// SubmitSellerReply provides a mock function with given fields: id, content
func (_m *Lazadar) SubmitSellerReply(id int64, content string) productreviewentity.SubmitSellerReplyResult {
	ret := _m.Called(id, content)

	var r0 productreviewentity.SubmitSellerReplyResult
	if rf, ok := ret.Get(0).(func(int64, string) productreviewentity.SubmitSellerReplyResult); ok {
		r0 = rf(id, content)
	} else {
		r0 = ret.Get(0).(productreviewentity.SubmitSellerReplyResult)
	}

	return r0
}

// UpdateFlexiCombo provides a mock function with given fields: apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, id, endTime, discountValue, stackable
func (_m *Lazadar) UpdateFlexiCombo(apply string, sampleSkus []entity.UpdateFlexiComboSampleSkusRequestEntity, criteriaType string, criteriaValue []string, orderNumbers int, name string, platformChannel string, giftSkus []entity.UpdateFlexiComboGiftSkusRequestEntity, startTime int, discountType string, id int64, endTime int, discountValue []string, stackable string) entity.UpdateFlexiComboResult {
	ret := _m.Called(apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, id, endTime, discountValue, stackable)

	var r0 entity.UpdateFlexiComboResult
	if rf, ok := ret.Get(0).(func(string, []entity.UpdateFlexiComboSampleSkusRequestEntity, string, []string, int, string, string, []entity.UpdateFlexiComboGiftSkusRequestEntity, int, string, int64, int, []string, string) entity.UpdateFlexiComboResult); ok {
		r0 = rf(apply, sampleSkus, criteriaType, criteriaValue, orderNumbers, name, platformChannel, giftSkus, startTime, discountType, id, endTime, discountValue, stackable)
	} else {
		r0 = ret.Get(0).(entity.UpdateFlexiComboResult)
	}

	return r0
}

// UpdateGlobalProductAttribute provides a mock function with given fields: payload
func (_m *Lazadar) UpdateGlobalProductAttribute(payload string) gspproductentity.UpdateGlobalProductAttributeResult {
	ret := _m.Called(payload)

	var r0 gspproductentity.UpdateGlobalProductAttributeResult
	if rf, ok := ret.Get(0).(func(string) gspproductentity.UpdateGlobalProductAttributeResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(gspproductentity.UpdateGlobalProductAttributeResult)
	}

	return r0
}

// UpdatePriceQuantity provides a mock function with given fields: payload
func (_m *Lazadar) UpdatePriceQuantity(payload string) productentity.UpdatePriceQuantityResult {
	ret := _m.Called(payload)

	var r0 productentity.UpdatePriceQuantityResult
	if rf, ok := ret.Get(0).(func(string) productentity.UpdatePriceQuantityResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.UpdatePriceQuantityResult)
	}

	return r0
}

// UpdatePriceSellableQuantity provides a mock function with given fields: payload
func (_m *Lazadar) UpdatePriceSellableQuantity(payload string) productentity.UpdatePriceQuantityResult {
	ret := _m.Called(payload)

	var r0 productentity.UpdatePriceQuantityResult
	if rf, ok := ret.Get(0).(func(string) productentity.UpdatePriceQuantityResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.UpdatePriceQuantityResult)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: payload
func (_m *Lazadar) UpdateProduct(payload string) productentity.UpdateProductResult {
	ret := _m.Called(payload)

	var r0 productentity.UpdateProductResult
	if rf, ok := ret.Get(0).(func(string) productentity.UpdateProductResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(productentity.UpdateProductResult)
	}

	return r0
}

// UpdateSeller provides a mock function with given fields: payload
func (_m *Lazadar) UpdateSeller(payload string) sellerentity.UpdateSellerResult {
	ret := _m.Called(payload)

	var r0 sellerentity.UpdateSellerResult
	if rf, ok := ret.Get(0).(func(string) sellerentity.UpdateSellerResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(sellerentity.UpdateSellerResult)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: payload
func (_m *Lazadar) UpdateUser(payload string) sellerentity.UpdateUserResult {
	ret := _m.Called(payload)

	var r0 sellerentity.UpdateUserResult
	if rf, ok := ret.Get(0).(func(string) sellerentity.UpdateUserResult); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(sellerentity.UpdateUserResult)
	}

	return r0
}

// UploadImage provides a mock function with given fields: image
func (_m *Lazadar) UploadImage(image []byte) productentity.UploadImageResult {
	ret := _m.Called(image)

	var r0 productentity.UploadImageResult
	if rf, ok := ret.Get(0).(func([]byte) productentity.UploadImageResult); ok {
		r0 = rf(image)
	} else {
		r0 = ret.Get(0).(productentity.UploadImageResult)
	}

	return r0
}

// UploadImageByPath provides a mock function with given fields: imagePath
func (_m *Lazadar) UploadImageByPath(imagePath string) productentity.UploadImageResult {
	ret := _m.Called(imagePath)

	var r0 productentity.UploadImageResult
	if rf, ok := ret.Get(0).(func(string) productentity.UploadImageResult); ok {
		r0 = rf(imagePath)
	} else {
		r0 = ret.Get(0).(productentity.UploadImageResult)
	}

	return r0
}

// UploadLazadaBagNumber provides a mock function with given fields: trackingNumbers, erpBagNumber, parcelsTotal, lzdBagNumber
func (_m *Lazadar) UploadLazadaBagNumber(trackingNumbers []string, erpBagNumber string, parcelsTotal int, lzdBagNumber string) firstmilebigbagentity.UploadLazadaBagNumberResult {
	ret := _m.Called(trackingNumbers, erpBagNumber, parcelsTotal, lzdBagNumber)

	var r0 firstmilebigbagentity.UploadLazadaBagNumberResult
	if rf, ok := ret.Get(0).(func([]string, string, int, string) firstmilebigbagentity.UploadLazadaBagNumberResult); ok {
		r0 = rf(trackingNumbers, erpBagNumber, parcelsTotal, lzdBagNumber)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.UploadLazadaBagNumberResult)
	}

	return r0
}

// UploadSellerBagNumber provides a mock function with given fields: trackingNumbers, erpBagNumber, parcelsTotal
func (_m *Lazadar) UploadSellerBagNumber(trackingNumbers []string, erpBagNumber string, parcelsTotal int) firstmilebigbagentity.UploadSellerBagNumberResult {
	ret := _m.Called(trackingNumbers, erpBagNumber, parcelsTotal)

	var r0 firstmilebigbagentity.UploadSellerBagNumberResult
	if rf, ok := ret.Get(0).(func([]string, string, int) firstmilebigbagentity.UploadSellerBagNumberResult); ok {
		r0 = rf(trackingNumbers, erpBagNumber, parcelsTotal)
	} else {
		r0 = ret.Get(0).(firstmilebigbagentity.UploadSellerBagNumberResult)
	}

	return r0
}

// UploadVideoBlock provides a mock function with given fields: uploadId, blockNo, blockCount, file
func (_m *Lazadar) UploadVideoBlock(uploadId string, blockNo string, blockCount string, file []byte) mediacenterentity.UploadVideoBlockResult {
	ret := _m.Called(uploadId, blockNo, blockCount, file)

	var r0 mediacenterentity.UploadVideoBlockResult
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) mediacenterentity.UploadVideoBlockResult); ok {
		r0 = rf(uploadId, blockNo, blockCount, file)
	} else {
		r0 = ret.Get(0).(mediacenterentity.UploadVideoBlockResult)
	}

	return r0
}

// UploadWaybill provides a mock function with given fields: waybill, packageCode, trackingNumber, extendsField, storeCode
func (_m *Lazadar) UploadWaybill(waybill []byte, packageCode string, trackingNumber string, extendsField string, storeCode string) fblentity.UploadWaybillResult {
	ret := _m.Called(waybill, packageCode, trackingNumber, extendsField, storeCode)

	var r0 fblentity.UploadWaybillResult
	if rf, ok := ret.Get(0).(func([]byte, string, string, string, string) fblentity.UploadWaybillResult); ok {
		r0 = rf(waybill, packageCode, trackingNumber, extendsField, storeCode)
	} else {
		r0 = ret.Get(0).(fblentity.UploadWaybillResult)
	}

	return r0
}

type mockConstructorTestingTNewLazadar interface {
	mock.TestingT
	Cleanup(func())
}

// NewLazadar creates a new instance of Lazadar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLazadar(t mockConstructorTestingTNewLazadar) *Lazadar {
	mock := &Lazadar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
